/**
 * 统计所有小于非负整数 n 的质数的数量。
 * 输入: 10
 * 输出: 4
 * 解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。
 * @param {*} n 
 */
// 思路
// 首先回顾质数的定义，质数是指在大于 1 的自然数中，除了 1 和它本身以外不再有其他因数的自然
// 数。所以，我们可以根据定义直接从 2 开始直到 n 根据定义判断每一个数字是否为质数。

// 详解
// 1. 首先定义一个方法isPrime,用于判断一个自然数是否为质数，根据乘法交换律，判断是否有因子边界为n的平方根即可
// 2. 循环从2到n判断是否为质数，将数量存入变量count计数器中

// 乘法交换律：对于任意两个数a和b，有a x b = b x a, 这意味着，如果n有一个因子a，那么n也可以被表示为a x (n/a)
// 因子的定义：如果整数b可以整除整数n（即n除以b的余数为0），那么说b是n的一个因子，记作n/b
// 因子的对称性： 如果a是n的一个因子，那么n/a也是n的一个因子。
// 平方根的重要性：假设n有一个大于其平方根的因子a，那么它必然有一个小于或等于其平方根的因子n/a, 因此，如果没有发现任何小于或等于n的平方根因子，那么n就不可能大于其平方根的因子
// 效率考虑：检查所有小于或等于n的数是否为n的因子是不高效的，通过只检查到n的平方根，就可以大大减少检查的数的数量，从而提高效率。
// 例如： 判断37是否为质数，不需要检查从2到36的所有数，只需要检查到37的平方根（大约是6.08）即可，由于37不能被2-6之间任何数整除，就可以确定37是一个质数

// 优化点： 基于观察和数学原理，质数分布在6的倍数附近，除了2和3之外，所有的质数都可以表示为6k+1或者6k-1的形式，即k为整数。所以只需要判断n是否为6k+1或者6k-1即可
// 优化点：基于观察和数学原理，质数不会出现在6的倍数+2，+3，+4的位置（即6的倍数+0或者+5可能出现质数），可以排除一些数字

function isPrime(n) {
  if(n < 2) return false
  if (n === 2 || n === 3) return true
  // 优化点
  if (n % 6 !== 1 && n % 6 !==5) return false
  const sqrt = Math.sqrt(n)
  for (let i = 5; i <= sqrt; i += 2)  {
    if (n % i === 0) return false
  }
  return true
}

function countPrimes(n) {
  let count = 0;
  for(let i = 2; i < n; i++) {
    if(isPrime(i)) {
      count++
    }
  }
  return count
}